<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- 数据源 -->
	<!-- SqlSession工厂 -->
	<!-- Mapper的自动扫描 -->
	<!-- 配置数据源
		通过C3P0的dataSource创建一个Bean
	 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="com.mysql.jdbc.Driver"></property>
		<property name="jdbcUrl" value="jdbc:mysql://127.0.0.1:3306/stmall"></property>
		<property name="user" value="root"></property>
		<property name="password" value="root"></property>
	</bean>
	
	<!-- 配置SqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		
		<!-- 指定MyBatis的核心配置文件 -->
		<property name="configLocation" value="classpath:SqlMapConfig.xml"></property>
	</bean>
	
	<!-- 扫描Mapper下的所有接口
		自动创建每个接口对应的Bean对象(需要Sqlsession, 配置文件)
		<bean >
		DeptMapper接口
		扫描完成后, 会自动地创建一个Bean, id为接口名, 首字母小写 deptMapper
		
		<bean id="userMapper" class="类型与UserMapper一样, 实现由UserMapper.xml" />
		
		那么在代码中, 就可以从Spring容器里获取Mapper 的Bean对象
		Java代码中, 可以使用ApplicationContext.getBean();
		配置中, 可以引用 userMapper对象
	 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
		<property name="basePackage" value="com.st.stmall.dao"></property>
	</bean>
	
	<!-- 自动扫描Service
	
		扫描完成之后, 会为Service包中的每一个类创建一个Bean对象
		
		<bean id="IUserService" class="com.st.service.impl.UserServiceImpl"></bean>
		
		base-package: 指定要扫描的包, 扫描时扫描该包及其子包下的所有的类(必须已经加好的注解的类才会生成Bean对象)
	 -->
	<context:component-scan base-package="com.st.stmall.service"></context:component-scan>
	
	<!-- 配置事务 -->
	<!-- 事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 事务管理器, 要管理连接对象上的事务
			连接对象来源于, C3p0连接池
		 -->
		 <property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 事务通知 -->
	<!-- 通过Spring事务管理机制, 配置事务的通知, 
		transaction-manager: 指定事务的管理器
	 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- 事务的属性配置 : 对哪些东西进行事务处理 -->
		<tx:attributes>	
			<!-- name : 需要进行事务处理的方法
				propagation : 事务的传播方式有七种
					PROPAGATION_REQUIRED: 如果当前有事务, 直接使用, 如果没有, 创建一个事务
					PROPAGATION_SUPPORTS: 如果当前有事务, 直接使用, 如果没有, 以非事务方式执行	
					https://www.cnblogs.com/originate918/p/6226342.html	
					
				isolation : 事务的隔离级别 五个
					1)	默认的事务处理
					2)	支持事务, 可能产生脏读, 不可重复读, 幻读
					3)	不允许脏读, 可以允许不可重复读, 幻读
					4)	不允许脏读, 不可重复读 可以允许幻读
					5)	都不允许
									
				rollback-for : 事务回滚的时机, 
					Exception: 当方法执行异常时, 抛出异常时, 事务回滚
							如果方法没有抛出异常, 事务将会提交
			-->
			<tx:method name="virement" propagation="REQUIRED" isolation="DEFAULT" rollback-for="Exception"/>
			<tx:method name="add" propagation="REQUIRED" isolation="DEFAULT" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 以AOP的方式配置事务 -->
	<aop:config>
		<!-- 切入点 -->
		<aop:pointcut expression="execution(* com.st.stmall.service..*.*(..))" id="servicetx"/>
		
		<!-- 用通知器代替切面  -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="servicetx"/>
	</aop:config>

</beans>
